Elm.PinyinApp = Elm.PinyinApp || {};
Elm.PinyinApp.make = function (_elm) {
   "use strict";
   _elm.PinyinApp = _elm.PinyinApp || {};
   if (_elm.PinyinApp.values)
   return _elm.PinyinApp.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "PinyinApp",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String = Elm.String.make(_elm);
   var htmlForCharacterCorrections = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var className = function () {
                    switch (_v0._1.ctor)
                    {case "Just": switch (_v0._1._0)
                         {case false: return "wrong";
                            case true: return "correct";}
                         break;
                       case "Nothing":
                       return "nothing";}
                    _U.badCase($moduleName,
                    "between lines 91 and 95");
                 }();
                 return A2($Html.span,
                 _L.fromArray([$Html$Attributes.$class(className)]),
                 _L.fromArray([$Html.text(_v0._0)]));
              }();}
         _U.badCase($moduleName,
         "between lines 91 and 95");
      }();
   };
   var findCorrectAnswer = F3(function (dict,
   i,
   str) {
      return function () {
         var maybe = A2($Dict.get,
         i,
         dict);
         return function () {
            switch (maybe.ctor)
            {case "Just":
               switch (maybe._0.ctor)
                 {case "Just":
                    switch (maybe._0._0)
                      {case false:
                         return {ctor: "_Tuple2"
                                ,_0: str
                                ,_1: $Maybe.Just(false)};
                         case true:
                         return {ctor: "_Tuple2"
                                ,_0: str
                                ,_1: $Maybe.Just(true)};}
                      break;
                    case "Nothing":
                    return {ctor: "_Tuple2"
                           ,_0: str
                           ,_1: $Maybe.Nothing};}
                 break;
               case "Nothing":
               return {ctor: "_Tuple2"
                      ,_0: str
                      ,_1: $Maybe.Nothing};}
            _U.badCase($moduleName,
            "between lines 83 and 87");
         }();
      }();
   });
   var correctedChineseSentence = F2(function (correctAnswers,
   sentencePinyin) {
      return A2($List.indexedMap,
      findCorrectAnswer(correctAnswers),
      A2($String.split,
      "",
      sentencePinyin));
   });
   var containsRegex = F2(function (r,
   w) {
      return A2($Regex.contains,
      $Regex.regex(r),
      w);
   });
   var pinyinToTone = function (word) {
      return A2(containsRegex,
      "[āēīōūǖĀĒĪŌŪǕ]",
      word) ? 1 : A2(containsRegex,
      "[áéíóúǘÁÉÍÓÚǗ]",
      word) ? 2 : A2(containsRegex,
      "[ǎěǐǒǔǚǍĚǏǑǓǙ]",
      word) ? 3 : A2(containsRegex,
      "[àèìòùǜÀÈÌÒÙǛ]",
      word) ? 4 : 0;
   };
   var correctedAnswersSoFar = function (model) {
      return function () {
         var pinyinWords = $String.words(model.sentencePinyin);
         var pinyinTones = A2($List.map,
         pinyinToTone,
         pinyinWords);
         var correctAnswers = A3($List.map2,
         F2(function (a,b) {
            return _U.eq(a,b);
         }),
         model.answersSoFar,
         pinyinTones);
         return $Dict.fromList(A2($List.indexedMap,
         F2(function (v0,v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }),
         correctAnswers));
      }();
   };
   var validHanziIndexList = function (sentenceChinese) {
      return function () {
         var indexedChineseSentenceList = A2($List.indexedMap,
         F2(function (v0,v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }),
         A2($String.split,
         "",
         sentenceChinese));
         var filteredList = A2($List.filter,
         function (_v9) {
            return function () {
               switch (_v9.ctor)
               {case "_Tuple2":
                  return $Basics.not(A2(containsRegex,
                    "[，？。.,?]",
                    _v9._1));}
               _U.badCase($moduleName,
               "on line 70, column 47 to 78");
            }();
         },
         indexedChineseSentenceList);
         return A2($List.map,
         function (_v13) {
            return function () {
               switch (_v13.ctor)
               {case "_Tuple2":
                  return _v13._0;}
               _U.badCase($moduleName,
               "on line 71, column 29 to 30");
            }();
         },
         filteredList);
      }();
   };
   var chineseSentenceView = function (model) {
      return function () {
         var hanziIndexList = validHanziIndexList(model.sentenceChinese);
         var correctedAnswersSoFarDict = correctedAnswersSoFar(model);
         var hanziIndexCorrectionList = A2($List.indexedMap,
         F2(function (i,p) {
            return {ctor: "_Tuple2"
                   ,_0: p
                   ,_1: A2($Dict.get,
                   i,
                   correctedAnswersSoFarDict)};
         }),
         hanziIndexList);
         var hanziIndexCorrectectionDict = $Dict.fromList(hanziIndexCorrectionList);
         var characterCorrectionList = A2(correctedChineseSentence,
         hanziIndexCorrectectionDict,
         model.sentenceChinese);
         return A2($List.map,
         htmlForCharacterCorrections,
         characterCorrectionList);
      }();
   };
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("chineseSentence")]),
      chineseSentenceView(model));
   });
   var update = F2(function (action,
   model) {
      return model;
   });
   var Decrement = {ctor: "Decrement"};
   var Increment = {ctor: "Increment"};
   var init = {_: {}
              ,answersSoFar: _L.fromArray([1
                                          ,1
                                          ,2
                                          ,3])
              ,sentenceChinese: "先生，您貴姓？"
              ,sentencePinyin: "xīan shēng nín guì xìng"};
   var Model = F3(function (a,
   b,
   c) {
      return {_: {}
             ,answersSoFar: c
             ,sentenceChinese: a
             ,sentencePinyin: b};
   });
   var main = $StartApp.start({_: {}
                              ,model: init
                              ,update: update
                              ,view: view});
   _elm.PinyinApp.values = {_op: _op
                           ,main: main
                           ,Model: Model
                           ,init: init
                           ,Increment: Increment
                           ,Decrement: Decrement
                           ,update: update
                           ,view: view
                           ,containsRegex: containsRegex
                           ,pinyinToTone: pinyinToTone
                           ,validHanziIndexList: validHanziIndexList
                           ,correctedChineseSentence: correctedChineseSentence
                           ,findCorrectAnswer: findCorrectAnswer
                           ,htmlForCharacterCorrections: htmlForCharacterCorrections
                           ,correctedAnswersSoFar: correctedAnswersSoFar
                           ,chineseSentenceView: chineseSentenceView};
   return _elm.PinyinApp.values;
};